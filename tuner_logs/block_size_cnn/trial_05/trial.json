{"trial_id": "05", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "num_blocks", "default": null, "conditions": [], "min_value": 1, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "filters1_block0", "default": 16, "conditions": [], "values": [16, 32, 64], "ordered": true}}, {"class_name": "Choice", "config": {"name": "filters2_block0", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel1_block0", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel2_block0", "default": 3, "conditions": [], "values": [3, 4], "ordered": true}}, {"class_name": "Float", "config": {"name": "l2_block0", "default": 0.001, "conditions": [], "min_value": 0.001, "max_value": 0.03, "step": 0.005, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "corner_filters1", "default": 16, "conditions": [], "values": [16, 32], "ordered": true}}, {"class_name": "Choice", "config": {"name": "corner_filters2", "default": 32, "conditions": [], "values": [32, 64], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dense_units", "default": 128, "conditions": [], "values": [128, 256, 512], "ordered": true}}, {"class_name": "Float", "config": {"name": "dropout", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "learning_rate", "default": 1e-05, "conditions": [], "min_value": 1e-05, "max_value": 0.001, "step": null, "sampling": "log"}}, {"class_name": "Choice", "config": {"name": "filters1_block1", "default": 16, "conditions": [], "values": [16, 32, 64], "ordered": true}}, {"class_name": "Choice", "config": {"name": "filters2_block1", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel1_block1", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel2_block1", "default": 3, "conditions": [], "values": [3, 4], "ordered": true}}, {"class_name": "Float", "config": {"name": "l2_block1", "default": 0.001, "conditions": [], "min_value": 0.001, "max_value": 0.03, "step": 0.005, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "filters1_block2", "default": 16, "conditions": [], "values": [16, 32, 64], "ordered": true}}, {"class_name": "Choice", "config": {"name": "filters2_block2", "default": 32, "conditions": [], "values": [32, 64, 128], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel1_block2", "default": 3, "conditions": [], "values": [3, 5], "ordered": true}}, {"class_name": "Choice", "config": {"name": "kernel2_block2", "default": 3, "conditions": [], "values": [3, 4], "ordered": true}}, {"class_name": "Float", "config": {"name": "l2_block2", "default": 0.001, "conditions": [], "min_value": 0.001, "max_value": 0.03, "step": 0.005, "sampling": "linear"}}], "values": {"num_blocks": 2, "filters1_block0": 64, "filters2_block0": 32, "kernel1_block0": 5, "kernel2_block0": 3, "l2_block0": 0.016, "corner_filters1": 16, "corner_filters2": 64, "dense_units": 512, "dropout": 0.1, "learning_rate": 0.0002998003302664412, "filters1_block1": 16, "filters2_block1": 128, "kernel1_block1": 3, "kernel2_block1": 4, "l2_block1": 0.006, "filters1_block2": 32, "filters2_block2": 32, "kernel1_block2": 5, "kernel2_block2": 3, "l2_block2": 0.011}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 232, in _build_and_fit_model\n    model = self._try_build(hp)\n            ^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 164, in _try_build\n    model = self._build_hypermodel(hp)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 155, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/cnn_attempt2.py\", line 213, in <lambda>\n    lambda hp: build_model(hp, input_shape),\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/cnn_attempt2.py\", line 139, in build_model\n    x = add([x, conv2])  # skip connection\n        ^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras/src/layers/merging/add.py\", line 69, in add\n    return Add(**kwargs)(inputs)\n           ^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Users/kassi04/Desktop/Research/block-prediction/please/lib/python3.12/site-packages/keras/src/layers/merging/base_merge.py\", line 93, in _compute_elemwise_op_output_shape\n    raise ValueError(\nValueError: Inputs have incompatible shapes. Received shapes (64, 64, 32) and (64, 64, 128)\n"}